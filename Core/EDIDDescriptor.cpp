#include "pch.h"
#include "EDIDDescriptor.h"

#include <fstream>

namespace winrt 
{
    using namespace winrt::Windows::Foundation;
    using namespace winrt::Windows::Foundation::Collections;
    using namespace winrt::MicrosoftDisplayCaptureTools::Framework;
} // namespace winrt

namespace winrt::MicrosoftDisplayCaptureTools::Framework::Utilities {

EDIDDescriptor::EDIDDescriptor(std::vector<uint8_t> data)
{
    if (data.size() < MinEDIDSize)
    {
        throw winrt::hresult_invalid_argument();
    }

    m_data = winrt::single_threaded_vector<uint8_t>(std::move(data));
}

EDIDDescriptor::EDIDDescriptor(winrt::com_array<uint8_t> data)
{
    if (data.size() < MinEDIDSize)
    {
        throw winrt::hresult_invalid_argument();
    }

    std::vector<uint8_t> vec(data.begin(), data.end());

    m_data = winrt::single_threaded_vector<uint8_t>(std::move(vec));
}

bool EDIDDescriptor::IsSame(winrt::IMonitorDescriptor other)
{
    if (Type() != other.Type())
    {
        return false;
    }

    auto otherData = other.Data();

    if (m_data.Size() != otherData.Size())
    {
        return false;
    }

    for (uint32_t i = 0; i < m_data.Size(); i++)
    {
        if (m_data.GetAt(i) != otherData.GetAt(i))
        {
            return false;
        }
    }

    return true;
}

winrt::IVectorView<uint8_t> EDIDDescriptor::Data()
{
    return m_data.GetView();
}

uint32_t EDIDDescriptor::SerialNumber()
{
    uint32_t serialNumber = (m_data.GetAt(SerialNumberLocation + 0) << 24) + (m_data.GetAt(SerialNumberLocation + 1) << 16) +
                            (m_data.GetAt(SerialNumberLocation + 2) << 8) + m_data.GetAt(SerialNumberLocation + 3);

    return serialNumber;
}

void EDIDDescriptor::SerialNumber(uint32_t number)
{
    m_data.SetAt(SerialNumberLocation + 3, static_cast<uint8_t>(number));
    m_data.SetAt(SerialNumberLocation + 2, static_cast<uint8_t>(number >> 8));
    m_data.SetAt(SerialNumberLocation + 1, static_cast<uint8_t>(number >> 16));
    m_data.SetAt(SerialNumberLocation + 0, static_cast<uint8_t>(number >> 24));

    UpdateChecksum();
}

void EDIDDescriptor::UpdateChecksum()
{
    uint8_t sum = 0;

    for (auto i = 0; i < MinEDIDSize - 1; i++)
    {
        sum += m_data.GetAt(i);
    }

    // EDID checksums are just the final byte of the block, and are set such that the sum of the block = 0 (mod 256)
    uint8_t checksum = (uint8_t)((0x100 - sum) & 0xFF);

    m_data.SetAt(MinEDIDSize - 1, checksum);
}

winrt::IMonitorDescriptor EDIDDescriptor::CreateStandardEDID()
{
    return winrt::make<EDIDDescriptor>(std::vector<uint8_t>(
        {0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x36, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x21, 0x01, 0x04,
         0xB3, 0x10, 0x09, 0x78, 0x0B, 0xEE, 0x95, 0xA3, 0x54, 0x4C, 0x99, 0x26, 0x0F, 0x50, 0x54, 0xFF, 0xFF, 0x80, 0x68, 0xC0,
         0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x04, 0x74, 0x00, 0x30, 0xF2, 0x70,
         0x5A, 0x80, 0xB0, 0x58, 0x8A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0xFD, 0x00, 0x17, 0xF0, 0x0F,
         0xFF, 0x1E, 0x00, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x4D, 0x53, 0x2D, 0x48, 0x57,
         0x48, 0x4C, 0x4B, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x04, 0x74, 0x80, 0x18, 0x71, 0x38, 0x2D, 0x40, 0x58, 0x2C, 0x45, 0x00,
         0x40, 0x44, 0x21, 0x00, 0x00, 0x1E, 0x01, 0xF8, 0x02, 0x03, 0x2B, 0x71, 0x49, 0x10, 0x20, 0x21, 0x22, 0x6F, 0x3F, 0x40,
         0x4C, 0x1F, 0x23, 0x09, 0x06, 0x07, 0x67, 0x03, 0x0C, 0x00, 0x00, 0x00, 0x18, 0x3C, 0x6D, 0xD8, 0x5D, 0xC4, 0x01, 0x3C,
         0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE2, 0x00, 0x4C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF6}));
}

winrt::IMonitorDescriptor EDIDDescriptor::CreateEDIDFromFile(hstring filePath)
{
    std::ifstream file(filePath.c_str());

    if (!file)
    {
        // the filepath was invalid or the file did not exist!
        throw winrt::hresult_invalid_argument();
    }

    std::vector<uint8_t> fileData(std::istreambuf_iterator<char>(file), {});
    return winrt::make<EDIDDescriptor>(fileData);
}

}// namespace winrt::MicrosoftDisplayCaptureTools::Framework::Utilities