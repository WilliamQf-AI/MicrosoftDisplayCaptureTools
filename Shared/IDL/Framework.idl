import "ConfigurationTools.idl";
import "CaptureCardPlugin.idl";
import "DisplayManager.idl";

namespace MicrosoftDisplayCaptureTools.Framework
{
    //
    // An abstracted Logger for the Hardware HLK project. A default implementation will be provided in this project, but 
    // custom implementations may be created and passed to the Core framework object, which will be promulgated throughout
    // the components loaded.
    // 
    // The default implementation will have further interactions with the TAEF testing platform if that is being used.
    //
    interface ILogger
    {
        // LogNote
        // ----------------------------------------------------------------------------------------------------------------
        // Notes:
        //      Logs an informational note, which does not imply any error or warning
        //
        // Parameters:
        //      note
        //          The string holding the note to log
        //
        void LogNote(String note);
        
        // LogWarning
        // ----------------------------------------------------------------------------------------------------------------
        // Notes:
        //      Logs a warning, which does not imply any error. These might be used to inform a caller of a non-standard or
        //      unexpected setup, of valid-yet-unexpected inputs, etc.
        //
        // Parameters:
        //      warning
        //          The string holding the warning to log
        //
        void LogWarning(String warning);

        // LogError
        // ----------------------------------------------------------------------------------------------------------------
        // Notes:
        //      Logs an error - either in setup or in test running.
        //
        // Parameters:
        //      error
        //          The string holding the error to log
        //
        void LogError(String error);

        // LogAssert
        // ----------------------------------------------------------------------------------------------------------------
        // Notes:
        //      Logs an assert - either in setup or in test running.
        //
        // Parameters:
        //      assert
        //          The string holding the error to log
        //
        void LogAssert(String error);

        
        // LogConfig
        // ----------------------------------------------------------------------------------------------------------------
        // Notes:
        //      Logs the configuration used for this system
        //
        // Parameters:
        //      assert
        //          The string holding the configuration info to log
        //
        void LogConfig(String config);
    };

    //
    // Indicates the type of monitor descriptor. This is used as a hint in how to best add/query information in the
    // descriptor from the framework - plugins are largely expected to only need the memory block.
    //
    enum MonitorDescriptorType
    {
        EDID,
        DisplayID,
        EmbeddedDisplayID
    };

    //
    // Represents a monitor descriptor (i.e. EDID, DisplayID).
    //
    interface IMonitorDescriptor
    {
        // The type of the monitor descriptor, various forms of EDID/DisplayID
        MonitorDescriptorType Type
        {
            get;
        };

        // The main data of the descriptor is returned in a read only vector to make 
        IVectorView<UInt8> Data
        {
            get;
        };

        // Allow getting and setting the serial number from the descriptor. This is primarily used to identify synthetic displays. A 4-byte
        // unsigned integer is used as the serial number fields for both EDID and DisplayID match this size.
        UInt32 SerialNumber
        {
            get;
            set;
        };

        Boolean IsSame(IMonitorDescriptor other);
    };

    // 
    // A mapping of a display source (the output of a GPU) to a capture input. This describes the actual physical connection
    // for the test setup.
    //
    interface ISourceToSinkMapping
    {
        Windows.Devices.Display.Core.DisplayTarget Source
        {
            get;
        };

        MicrosoftDisplayCaptureTools.CaptureCard.IDisplayInput Sink
        {
            get;
        };
    };

    //
    // The core of the Hardware HLK project, this object manages communication and coordination between the various other
    // components of this framework.
    //
    interface ICore
    {
        // Get the version, in Major.Minor format
        String Version
        { 
            get;
        };

        // Get the logger for this instance
        ILogger Logger
        {
            get;
        };

        // LoadCapturePlugin
        // ----------------------------------------------------------------------------------------------------------------
        // Notes:
        //      Loads a new plugin into the capture framework. Note that loading multiple instances of the same capture
        //      card is not supported, this function will fail.
        //
        // Returns:
        //      The newly loaded capture card controller object
        // 
        // Parameters:
        //      pluginPath
        //          This string represents a filepath from which a conformant plugin implementation is exposed.
        // 
        //      className (optional)
        //          This string represents the namespace.classname of the class implementing the plugin interface
        //
        //          If not provided, the className will be constructed from the pluginPath's name, followed by a standard
        //          suffix, '.Controller'
        //          Example: pluginPath = ".\\GenericCaptureCard.dll"
        //                   className  = "GenericCaptureCard.Controller"
        // 
        MicrosoftDisplayCaptureTools.CaptureCard.IController LoadCapturePlugin(String pluginPath, String className);
        MicrosoftDisplayCaptureTools.CaptureCard.IController LoadCapturePlugin(String pluginPath);

        // LoadToolbox
        // ----------------------------------------------------------------------------------------------------------------
        // Notes:
        //      Adds a Toolbox to the Core, any configuration tools exposed by the Toolbox opened here will now be 
        //      available to the Core for test runs.
        //
        // Returns:
        //      The newly loaded toolbox object
        //
        // Parameters:
        //      toolboxPath
        //          This string represents a filepath from which a conformant Toolbox implementation is exposed.
        // 
        //      className
        //          This string represents the namespace.classname of the class implementing the toolbox interface.
        //
        //          If not provided, the className will be constructed from the toolboxPath's name, followed by a standard
        //          suffix, '.Toolbox'
        //          Example: pluginPath = ".\\BasicConfigurationTools.dll"
        //                   className  = "BasicConfigurationTools.Toolbox"
        //
        MicrosoftDisplayCaptureTools.ConfigurationTools.IConfigurationToolbox LoadToolbox(String toolboxPath, String className);
        MicrosoftDisplayCaptureTools.ConfigurationTools.IConfigurationToolbox LoadToolbox(String toolboxPath);

        // LoadDisplayEngine
        // ----------------------------------------------------------------------------------------------------------------
        // Notes:
        //      Sets a DisplayEngine to the Core, this can be used to take over display outputs on the test system and
        //      control their outputs. Only a single DisplayEngine can be loaded at a time.
        //
        // Returns:
        //      The newly loaded DisplayEngine
        //
        // Parameters:
        //      displayManagerPath
        //          This string represents a filepath from which a conformant DisplayManager implementation is exposed.
        // 
        //      className
        //          This string represents the namespace.classname of the class implementing the displayEngine interface.
        //
        //          If not provided, the className will be constructed from the displayManagerPath's name, followed by a 
        //          standard '.DisplayManager' suffix.
        //          Example: pluginPath = ".\\BasicDisplayManager.dll"
        //                   className  = "BasicDisplayManager.DisplayManager"
        //
        MicrosoftDisplayCaptureTools.Display.IDisplayEngine LoadDisplayManager(String displayManagerPath, String className);
        MicrosoftDisplayCaptureTools.Display.IDisplayEngine LoadDisplayManager(String displayManagerPath);

        // LoadConfigFile
        // ----------------------------------------------------------------------------------------------------------------
        // Notes:
        //      Loads a configuration file which specifies other binaries to load and other test setup information
        //
        // Parameters:
        //      configFile
        //          The framework will first attempt to see if this parameter is a valid JSON string, if so it will simply
        //          use this as the configuration data. This string can instead be provided as a file path, in which case
        //          the framework will attempt to load the configuration from there (formatted identically with JSON).
        //
        void LoadConfigFile(String configFile);

        // LockFramework
        // ----------------------------------------------------------------------------------------------------------------
        // Notes:
        //      Locks the framework so that components can't be changed. The intention is that this should be used when 
        //      writing tests to prevent accidental changes that would be difficult to debug.
        //
        // Returns:
        //      The IClosable object returned represents the lock on framework, calling .Close() or allowing the object to
        //      be destroyed will unlock the Framework.
        //
        Windows.Foundation.IClosable LockFramework();

        // GetSourceToSinkMapping
        // ----------------------------------------------------------------------------------------------------------------
        // Notes:
        //      Returns a list of all capture card inputs with their corresponding displays, a source-to-sink mapping.
        //
        // Parameters:
        //      regenerateMappings
        //          If true, the framework will attempt to automatically generate a mapping of display sources to sinks 
        //          using any currently loaded CaptureCardPlugins and DisplayEngines. If false the framework will provide
        //          only whichever mappings were provided by configuration file. If false and no mappings were provided via
        //          config files, an empty array will be returned.
        // 
        // Returns:
        //      An array of structs containing the source and sink references.
        //
        IVector<ISourceToSinkMapping> GetSourceToSinkMappings(Boolean regenerateMappings);

        // GetLoadedTools
        // ----------------------------------------------------------------------------------------------------------------
        // Notes:
        //      Returns a collection of all tools loaded by the framework.
        //
        MicrosoftDisplayCaptureTools.ConfigurationTools.IConfigurationTool[] GetLoadedTools();
        
        // GetCaptureCard
        // ----------------------------------------------------------------------------------------------------------------
        // Notes:
        //      Returns a collection of all capture cards loaded by the framework.
        //
        MicrosoftDisplayCaptureTools.CaptureCard.IController[] GetCaptureCards();

        // GetDisplayEngine
        // ----------------------------------------------------------------------------------------------------------------
        // Notes:
        //      Returns a reference to the DisplayEngine loaded by the framework.
        //
        MicrosoftDisplayCaptureTools.Display.IDisplayEngine GetDisplayEngine();
    }
}