import "ConfigurationTools.idl";
import "CaptureCardPlugin.idl";
import "DisplayManager.idl";

namespace MicrosoftDisplayCaptureTools.Framework
{
    //
    // The core of the Hardware HLK project, this object manages communication and coordination between the various other
    // components of this framework.
    //
    interface ICore
    {
        // OpenPlugin
        // ----------------------------------------------------------------------------------------------------------------
        // Notes:
        //      Loads a new plugin into the Core. Note that only one plugin can be loaded at a time, so calling this
        //      multiple times is not recommended outside of testing scenarios.
        //
        // Parameters:
        //      pluginPath
        //          This string represents a filepath from which a conformant plugin implementation is exposed.
        // 
        //      className
        //          This string represents the namespace.classname of the class implementing the plugin interface
        //
        void LoadPlugin(String pluginPath, String className);

        // LoadToolbox
        // ----------------------------------------------------------------------------------------------------------------
        // Notes:
        //      Adds a Toolbox to the Core, any configuration tools exposed by the Toolbox opened here will now be 
        //      available to the Core for test runs.
        //
        // Parameters:
        //      toolboxPath
        //          This string represents a filepath from which a conformant Toolbox implementation is exposed.
        // 
        //      className
        //          This string represents the namespace.classname of the class implementing the toolbox interface
        //
        void LoadToolbox(String toolboxPath, String className);

        // LoadDisplayManager
        // ----------------------------------------------------------------------------------------------------------------
        // Notes:
        //      Adds a DisplayManager to the Core. This will be used 
        //
        // Parameters:
        //      displayManagerPath
        //          This string represents a filepath from which a conformant DisplayManager implementation is exposed.
        // 
        //      className
        //          This string represents the namespace.classname of the class implementing the displayEngine interface
        //
        void LoadDisplayManager(String displayManagerPath, String className);

        // LoadConfigFile
        // ----------------------------------------------------------------------------------------------------------------
        // Notes:
        //      Loads a configuration file which specifies other binaries to load and other test setup information
        //
        // Parameters:
        //      configFile
        //          The framework will first attempt to see if this parameter is a valid JSON string, if so it will simply
        //          use this as the configuration data. This string can instead be provided as a file path, in which case
        //          the framework will attempt to load the configuration from there (formatted identically with JSON).
        //
        void LoadConfigFile(String configFile);

        // RunTest
        // ----------------------------------------------------------------------------------------------------------------
        // Notes:
        //      This method will begin running through a test scenario with current test settings. This is a blocking 
        //      operation and all methods on this object will fail while this is in progress.
        //
        void RunTest();

        // GetLoadedTools
        // ----------------------------------------------------------------------------------------------------------------
        // Notes:
        //      Returns a collection of all tools loaded by the framework. This is intended to allow utilities and tests to 
        //      inspect and configure settings for tools before calling RunTest.
        //
        MicrosoftDisplayCaptureTools.ConfigurationTools.IConfigurationTool[] GetLoadedTools();

        // GetCaptureCard
        // ----------------------------------------------------------------------------------------------------------------
        // Notes:
        //      Returns a reference to the capture card plugin loaded by the framework. This is intended to allow utilities
        //      and tests to directly control the flow of a test for development purposes.
        //
        MicrosoftDisplayCaptureTools.CaptureCard.IController GetCaptureCard();

        // GetDisplayEngine
        // ----------------------------------------------------------------------------------------------------------------
        // Notes:
        //      Returns a reference to the DisplayEngine loaded by the framework. This is intended to allow utilities and 
        //      tests to directly control the rendering to the physical display as well as managing the "predicted" output 
        //      rendering.
        //
        MicrosoftDisplayCaptureTools.Display.IDisplayEngine GetDisplayEngine();
        
    }
}