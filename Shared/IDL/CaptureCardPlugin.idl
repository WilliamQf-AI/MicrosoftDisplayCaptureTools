import "ConfigurationTools.idl";
import "Framework.idl";

namespace MicrosoftDisplayCaptureTools.CaptureCard 
{
    //
    // ICaptureCapabilities represents the capabilities of the frame capture device and plugin. This is used to
    // determine if test cases are applicable and how the framework should proceed.
    //
    // Other capabilities of the capture card are exposed by simply exposing various configuration tools, see
    // ConfigurationTools.idl for more information.
    //
    interface ICaptureCapabilities
    {
        // Can the capture card return captured frames to the host _without_ any compression or artifacts
        Boolean CanReturnRawFramesToHost();

        // Can the capture card return captured frames to the host - to be used for diagnostics/debugging
        Boolean CanReturnFramesToHost();

        // Can the capture card capture multiple subsequent frames
        Boolean CanCaptureFrameSeries();

        // Can hot plug/unplug as a monitor.
        Boolean CanHotPlug();

        // Supports hotplugging with a variable EDID
        Boolean CanConfigureEDID();

        // Supports hotplugging with a variable DisplayID
        Boolean CanConfigureDisplayID();

        // The maximum size supported for an EDID/DisplayID descriptor.
        UInt32 GetMaxDescriptorSize();

        // Note: While there are only a few of these types defined now, we anticipate this list to grow as we
        // define more test scenarios.
    };

    //
    // CaptureTriggerType defines the different types of capture triggers
    //
    enum CaptureTriggerType
    {
        // Immediately capture the next available frame
        Immediate,

        // Capture the next available frame after some time period
        Timer,

        // Capture first frame that is not completely black
        FirstNonEmpty,

        // Note: While there are only a few of these types defined now, we anticipate this list to grow as we
        // define more test scenarios.
    };

    //
    // A CaptureTrigger represents settings for what should 'trigger' the capture device to single out a frame.
    //
    interface ICaptureTrigger
    {
        // Define the type of this trigger
        CaptureTriggerType Type
        {
            get;
            set;
        };

        // For CaptureTriggerType::Timer, this specifies the amount of time (in ms) to wait before capturing.
        UInt32 TimeToCapture
        {
            get;
            set;
        };

        // Note: As with CaptureTriggerType, we expect this struct to grow as we define more test scenarios and any
        // trigger types that they may necessitate.
    };

    //
    // Represents a captured frame. The actual data for the captured frame can be either on PC or on the capture card
    // itself, this object merely controls access.
    //
    // This is to be implemented by capture card producer.
    //
    interface IDisplayCapture
    {
        // CompareCaptureToPrediction
        // ----------------------------------------------------------------------------------------------------------------
        // Notes:
        //      Compares the captured image against a software-generated reference image.
        //
        // Returns:
        //      A boolean value indicating if the comparison succeeded (true) or failed (false).
        //
        // Parameters:
        //      name
        //          A string name uniquely identifying the set of parameters specifying this particular test run.
        //      prediction
        //          The reference data generated by the various configuration tools.
        //
        Boolean CompareCaptureToPrediction(String name, MicrosoftDisplayCaptureTools.Display.IDisplayPredictionData prediction);

        // GetFrameData
        // ----------------------------------------------------------------------------------------------------------------
        // Notes:
        //      Returns a buffer reference to the raw pixel data of this capture. The framework will only call this method
        //      if the 'returnRawFramesToHost' capability is set.
        //
        MicrosoftDisplayCaptureTools.Framework.IFrameData GetFrameData();

        // ExtendedProperties
        // ----------------------------------------------------------------------------------------------------------------
        // Notes:
        //      A map of properties describing the display capture. These are not required for function, but may assist
        //      tools in interpreting this data.
        //
        Windows.Foundation.Collections.IMapView<String, Object> ExtendedProperties
        {
            get;
        };
    }

    //
    // This represents a single input port on a capture device. Analagous to a single HDMI or DisplayPort input port. For
    // Capture Cards that support multiple inputs, the IController implementation should instantiate and return
    // implementations for each port.
    //
    // This is to be implemented by capture card producer.
    //
    interface IDisplayInput {
        // A string identifier for this particular captured display, to be used for logging.
        String Name
        {
            get;
        };

        // SetDescriptor
        // ----------------------------------------------------------------------------------------------------------------
        // Notes:
        //      Sets the descriptor to be used when this monitor is initialized. This will only be set if one or both of
        //      supportsEdid or supportsDisplayID is set to true from the GetCapabilities call.
        //      handle it.
        //
        // Parameters:
        //      descriptor
        //          This represents the monitor descriptor to represent to represent the emulated display.
        //
        void SetDescriptor(MicrosoftDisplayCaptureTools.Framework.IMonitorDescriptor descriptor);

        // GetCaptureTrigger
        // ----------------------------------------------------------------------------------------------------------------
        // Notes:
        //      Returns the capture trigger that will be used to trigger frame capture after 'CaptureFrame' is called.
        //      These conditions can range from 'capture the next frame' to 'capture the next non-empty frame' to 'capture
        //      the next frame matching a specific pattern'. Supported triggers should be reported in this object's
        //      GetCapabilities method, and this method should fail if an unsupported trigger is supplied.
        //
        ICaptureTrigger GetCaptureTrigger();

        // GetCaptureTrigger
        // ----------------------------------------------------------------------------------------------------------------
        // Notes:
        //      Returns the capabilities of the capture card for this display. These will be used to determine which tools
        //      are applicable and which are not.
        //
        ICaptureCapabilities GetCapabilities();

        // CaptureFrame
        // ----------------------------------------------------------------------------------------------------------------
        // Notes:
        //      Captures a display frame on the device when certain conditions are met. We expressly do not specify that
        //      the captured pixels must be brought back to the host computer - it is valid to keep a representation of the
        //      frame only on the capture device, although this inherently limits debuggability.
        //
        IDisplayCapture CaptureFrame();

        // FinalizeDisplayState
        // ----------------------------------------------------------------------------------------------------------------
        // Notes:
        //      This is called by the framework after iterating through every "DisplaySetup" configuration tool. If this
        //      plugin has tools that require some device reset or some time consuming operation (for example, HPD'ing with
        //      a specific EDID), that operation should be performed when this function is called.
        //
        void FinalizeDisplayState();
    }

    //
    // The entry-point object for a capture card plugin, this object is instantiated by the framework and is used to
    // access the functionalities of the hardware.
    //
    // This is to be implemented by capture card producer.
    //
    interface IController {
        // A string identifier for this particular implementation of the framework, this is only to be used for logging.
        String Name
        {
            get;
        };

        // Get the version of this implementation, in Major.Minor.Patch format.
        MicrosoftDisplayCaptureTools.Framework.Version Version
        {
            get;
        };

        // EnumerateDisplayInputs
        // ----------------------------------------------------------------------------------------------------------------
        // Notes:
        //      Enumerates
        //
        // Parameters:
        //      pluginPath
        //          This string represents a filepath from which a conformant capture card plugin implementation is exposed.
        //
        IDisplayInput[] EnumerateDisplayInputs();

        // SetConfigData
        // ----------------------------------------------------------------------------------------------------------------
        // Notes:
        //      Initialize tools with settings from a configuration file loaded by the framework
        //
        // Parameters:
        //      data
        //          The subsection of the json file for this toolbox
        //
        void SetConfigData(Windows.Data.Json.IJsonValue data);
    }

    //
    // The required static initializer for IController implementations. This is how other components of this project will
    // instantiate IController implementations.
    //
    // This is to be implemented by capture card producer.
    //
    interface IControllerFactory {
        // Create
        // ----------------------------------------------------------------------------------------------------------------
        // Notes:
        //     Creates an IController implementation instance with a defined logger.
        //
        IController CreateController(MicrosoftDisplayCaptureTools.Framework.ILogger logger);
    };

    enum ControllerFirmwareState
    {
        // The firmware isn't recognized or can't be updated to a known-good state by the
        ManualUpdateNeeded,

        // A firmware update is required
        UpdateRequired,

        // A firmware update is available but not required
        UpdateAvailable,

        // No update is needed
        UpToDate
    };

    /// <summary>
    /// An interface implemented by capture cards that support firmware updates.
    /// </summary>
    interface IControllerWithFirmware
    {
        ControllerFirmwareState FirmwareState
        {
            get;
        };
        String FirmwareVersion
        {
            get;
        };

        Windows.Foundation.IAsyncAction UpdateFirmwareAsync();
    };
} // namespace MicrosoftDisplayCaptureTools. CaptureCard