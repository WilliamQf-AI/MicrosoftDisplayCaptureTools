import "Framework.idl";

namespace MicrosoftDisplayCaptureTools.Display
{
    // Represents the predicted output for the current settings of the display engine that creates it
    interface IDisplayPredictionData
    {
        // GetFrameData
        // ------------------------------------------------------------------------------------------------------------
        // Notes:
        //     Gets an object representing the data corresponding to the predicted frame.
        //
        MicrosoftDisplayCaptureTools.Framework.IFrameData FrameData
        {
            get;
        };

        // A collection of properties to go alongside the frame itself
        Windows.Foundation.Collections.IMap<String, IInspectable> Properties
        {
            get;
        };
    };

    // Manages the predicted output of a series of tools. Analogous to the IDisplayOutput interface, but for the the
    // predicted output rather than the actual output.
    interface IDisplayPrediction
    {
        // GeneratePredictionDataAsync
        // ------------------------------------------------------------------------------------------------------------
        // Notes:
        //     Go through and generate the predicted output data using any and all tools which have registered with
        //     this object
        //
        Windows.Foundation.IAsyncOperation<IDisplayPredictionData> GeneratePredictionDataAsync();

        // DisplaySetupCallback
        // ------------------------------------------------------------------------------------------------------------
        // Notes:
        //     Register a callback to modify DisplayOutput settings before display mode has been chosen and applied.
        //     Tools availing themselves of this callback are expected to be modifying things like resolution, refresh
        //     rate, etc.
        //
        event Windows.Foundation.EventHandler<IDisplayPredictionData> DisplaySetupCallback;

        // RenderSetupCallback
        // ------------------------------------------------------------------------------------------------------------
        // Notes:
        //     Register a callback to modify DisplayOutput settings after the display mode has been chosen and surfaces
        //     created, but before the core render loop begins.
        //
        event Windows.Foundation.EventHandler<IDisplayPredictionData> RenderSetupCallback;

        // RenderLoopCallback
        // ------------------------------------------------------------------------------------------------------------
        // Notes:
        //     Register a callback to modify DisplayOutput settings during the render loop. These callbacks will be
        //     called for each frame, so high-latency callbacks may cause problems.
        //
        event Windows.Foundation.EventHandler<IDisplayPredictionData> RenderLoopCallback;
    };

    // Used to set parameters for this particular output plane.
    interface IDisplayEnginePlaneProperties
    {
        // Should this plane be rendered
        Boolean Active
        {
            get;
            set;
        };

        // The location of this plane, relative to the top left corner of the base plane.
        Windows.Graphics.Imaging.BitmapBounds Rect
        {
            get;
            set;
        };

        // A generic property bag of items - these IInspectable objects may be either WinRT runtime classes, wrapped
        // scalars/arrays, or even wrapped classic-com objects (see Shared\DisplayToolComInterop.h). It is intended
        // for tools to retrieve/set items to this list in any callbacks to the DisplayEngine rendering pipeline.
        Windows.Foundation.Collections.IMap<String, IInspectable> Properties
        {
            get;
        };
    };

    // Used to set parameters to the selected display
    interface IDisplayEngineProperties
    {
        // The active mode of this display
        Windows.Devices.Display.Core.DisplayModeInfo ActiveMode
        {
            get;
            set;
        };

        // Get the per-plane property set for this display
        // The first entry of the returned array will always represent the base plane
        IDisplayEnginePlaneProperties[] GetPlaneProperties();
    };

    // The arguments passed to tool display setup callback events. Specifically
    // these events are called for available modes on the test sytem until one
    // is found to be compatible with all registered display setup tools.
    interface IDisplaySetupToolArgs
    {
        // Properties of the current display engine.
        IDisplayEngineProperties Properties
        {
            get;
        };

        // The current mode being tested to see if all tools can accept it
        Windows.Devices.Display.Core.DisplayModeInfo Mode
        {
            get;
        };

        // All registered display setup tools must be compatible with a mode
        // before it can be selected for a test. If no available mode can
        // meet the tool requirements, the test with those tool settings is
        // blocked from running.
        void IsModeCompatible(Boolean accept);
    };

    // The arguments passed to tool render setup callback events. Specifically
    // these events are called once, just before the start of the render loop,
    // to construct any needed objects before the actual rendering.
    interface IRenderSetupToolArgs
    {
        // Properties of the current display engine.
        IDisplayEngineProperties Properties
        {
            get;
        };
    };

    // The arguments passed to tool render loop callback events. Specifically
    // these events are called for each sync when drawing to the output.
    interface IRenderingToolArgs
    {
        // Properties of the current display engine.
        IDisplayEngineProperties Properties
        {
            get;
        };

        // Indicates the current frame number of the output
        UInt64 FrameNumber
        {
            get;
        };
    };

    // Represents a particular display managed with this DisplayEngine
    interface IDisplayOutput
    {
        // The display target tracked by this object
        Windows.Devices.Display.Core.DisplayTarget Target
        {
            get;
        };

        // GetProperties
        // ------------------------------------------------------------------------------------------------------------
        // Notes:
        //     Get the properties object for this IDisplayEngine implementation. ConfigurationTools will manipulate the
        //     various members of this object to change how and what is rendered to the display
        //
        IDisplayEngineProperties GetProperties();

        // StartRender
        // ------------------------------------------------------------------------------------------------------------
        // Notes:
        //     Using all set properties on this object and all child planes, actually begins physically rendering to
        //     the target display. The rendering will stop when Close() is called on the returned object.
        //
        Windows.Foundation.IClosable StartRender();

        // DisplaySetupCallback
        // ------------------------------------------------------------------------------------------------------------
        // Notes:
        //     Register a callback to modify DisplayOutput settings before display mode has been chosen and applied.
        //     Tools availing themselves of this callback are expected to be modifying things like resolution, refresh
        //     rate, etc.
        //
        event Windows.Foundation.EventHandler<IDisplaySetupToolArgs> DisplaySetupCallback;

        // RenderSetupCallback
        // ------------------------------------------------------------------------------------------------------------
        // Notes:
        //     Register a callback to modify DisplayOutput settings after the display mode has been chosen and surfaces
        //     created, but before the core render loop begins.
        //
        event Windows.Foundation.EventHandler<IRenderSetupToolArgs> RenderSetupCallback;

        // RenderLoopCallback
        // ------------------------------------------------------------------------------------------------------------
        // Notes:
        //     Register a callback to modify DisplayOutput settings during the render loop. These callbacks will be
        //     called for each frame, so high-latency callbacks may cause problems.
        //
        event Windows.Foundation.EventHandler<IRenderingToolArgs> RenderLoopCallback;
    };

    // The engine managing both physical and predicted output to the display
    interface IDisplayEngine
    {
        // Get the name of this IDisplayEngine implementation
        String Name
        {
            get;
        };

        // Get the version of this implementation, in Major.Minor.Patch format
        MicrosoftDisplayCaptureTools.Framework.Version Version
        {
            get;
        };

        // InitializeOutput
        // ------------------------------------------------------------------------------------------------------------
        // Notes:
        //     Initializes the display engine for a particular target
        //
        [default_overload] IDisplayOutput InitializeOutput(Windows.Devices.Display.Core.DisplayTarget target);

        // InitializeOutput
        // ------------------------------------------------------------------------------------------------------------
        // Notes:
        //     Initializes the display engine for a particular target, using the StableMonitorId string to identify the
        //     display. This is expected to be sourced from a pre-generated config file.
        //
        IDisplayOutput InitializeOutput(String target);

        // CreateDisplayPrediction
        // ------------------------------------------------------------------------------------------------------------
        // Notes:
        //     Creates a display prediction object, these are used by tools to create a prediction of an object
        //
        IDisplayPrediction CreateDisplayPrediction();

        // SetConfigData
        // ----------------------------------------------------------------------------------------------------------------
        // Notes:
        //      Initialize tools with settings from a configuration file loaded by the framework
        //
        // Parameters:
        //      data
        //          The subsection of the json file for this toolbox
        //
        void SetConfigData(Windows.Data.Json.IJsonValue data);
    };

    //
    // The required initializer for IDisplayEngine implementations. This is how other components of this project will
    // instantiate IDisplayEngine implementations.
    //
    // This is to be implemented by capture card producer.
    //
    interface IDisplayEngineFactory
    {
        // Create
        // ----------------------------------------------------------------------------------------------------------------
        // Notes:
        //     Creates an IDisplayEngine implementation instance with a defined logger.
        //
        IDisplayEngine CreateDisplayEngine(MicrosoftDisplayCaptureTools.Framework.ILogger logger);
    };

} // namespace MicrosoftDisplayCaptureTools. Display