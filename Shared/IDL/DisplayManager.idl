import "Framework.idl";

namespace MicrosoftDisplayCaptureTools.Display
{
    // Struct used to represent an image to show as the 'base' of a scanout plane
    interface IDisplayEnginePlaneBaseImage
    {
        // The actual pixel data, should be of exact size Resolution.Height * Resolution.Width * (Bytes per pixel).
        Windows.Storage.Streams.IBuffer Pixels{ get; set; };

        // The pixel format of these pixels. If the actual plane format is not supported, R16G16B16A16Float will be used.
        Windows.Graphics.DirectX.DirectXPixelFormat Format{ get; set; };

        // The resolution of the plane.
        Windows.Graphics.SizeInt32 Resolution{ get; set; };
    };

    // Used to set parameters for this particular MPO plane.
    interface IDisplayEnginePlanePropertySet
    {
        // Should this plane be rendered
        Boolean Active{ get; set; };

        // The location of this plane, relative to the top left corner of the base plane.
        Windows.Graphics.Imaging.BitmapBounds Rect{ get; set; };

        // The format of this plane
        Windows.Graphics.DirectX.DirectXPixelFormat Format{ get; set; };

        // The base layer of the plane.
        IDisplayEnginePlaneBaseImage BaseImage{ get; };

        // A generic property bag of items - these IInspectable objects may be either WinRT runtime classes, wrapped 
        // scalars/arrays, or even wrapped classic-com objects (see Shared\DisplayToolComInterop.h). It is intended
        // for tools to retrieve/set items to this list in any callbacks to the DisplayEngine rendering pipeline.
        Windows.Foundation.Collections.IMap<String, IInspectable> PropertyBag{ get; };
    };

    // Used to set parameters to the selected display
    interface IDisplayEnginePropertySet
    {
        // The active mode of this display
        Windows.Devices.Display.Core.DisplayModeInfo ActiveMode{ get; set; };

        // The refresh rate of this display
        Double RefreshRate{ get; set; };

        // The resolution of this display
        Windows.Graphics.SizeInt32 Resolution{ get; set; };

        // Get the per-plane property set for this display
        // The first entry of the returned array will always represent the base plane
        IDisplayEnginePlanePropertySet[] GetPlaneProperties();
    };

    // Represents the predicted output for the current settings of the display engine that creates it
    interface IDisplayEnginePrediction
    {
        // GetFrameData 
        // ------------------------------------------------------------------------------------------------------------
        // Notes:
        //     Gets an object representing the data corresponding to the predicted frame.
        //
        MicrosoftDisplayCaptureTools.Framework.IFrameData GetFrameData();
    };

    // Represents a particular display managed with this DisplayEngine
    interface IDisplayOutput
    {
        // The display target tracked by this object
        Windows.Devices.Display.Core.DisplayTarget Target
        {
            get;
        };

        // GetProperties 
        // ------------------------------------------------------------------------------------------------------------
        // Notes:
        //     Get the properties object for this IDisplayEngine implementation. ConfigurationTools will manipulate the
        //     various members of this object to change how and what is rendered to both the phyiscal display and the 
        //     associated prediction.
        //
        IDisplayEnginePropertySet GetProperties();

        // GetPrediction 
        // ------------------------------------------------------------------------------------------------------------
        // Notes:
        //     Gets the prediction object for this IDisplayEngine implementation. This object will use the same 
        //     information used for physical rendering to create a software approximation.
        //
        IDisplayEnginePrediction GetPrediction();

        // StartRender 
        // ------------------------------------------------------------------------------------------------------------
        // Notes:
        //     Using all set properties on this object and all child planes, actually begins physically rendering to 
        //     the target display. The rendering will stop when Close() is called on the returned object.
        //
        Windows.Foundation.IClosable StartRender();

        // DisplaySetupCallback 
        // ------------------------------------------------------------------------------------------------------------
        // Notes:
        //     Register a callback to modify DisplayOutput settings before display mode has been chosen and applied. 
        //     Tools availing themselves of this callback are expected to be modifying things like resolution, refresh
        //     rate, etc.
        //
        event Windows.Foundation.EventHandler<IDisplayEnginePropertySet> DisplaySetupCallback;

        // RenderSetupCallback
        // ------------------------------------------------------------------------------------------------------------
        // Notes:
        //     Register a callback to modify DisplayOutput settings after the display mode has been chosen and surfaces
        //     created, but before the core render loop begins.
        //
        event Windows.Foundation.EventHandler<IDisplayEnginePropertySet> RenderSetupCallback;

        // RenderLoopCallback
        // ------------------------------------------------------------------------------------------------------------
        // Notes:
        //     Register a callback to modify DisplayOutput settings during the render loop. These callbacks will be
        //     called for each frame, so high-latency callbacks may cause problems.
        //
        event Windows.Foundation.EventHandler<IDisplayEnginePropertySet> RenderLoopCallback;
    };

    // The engine managing both physical and predicted output to the display
    interface IDisplayEngine
    {
        // Get the name of this IDisplayEngine implementation
        String Name
        {
            get;
        };

        // Get the version of this implementation, in Major.Minor format
        String Version
        {
            get;
        };

        // InitializeOutput 
        // ------------------------------------------------------------------------------------------------------------
        // Notes:
        //     Initializes the display engine for a particular target
        //
        [default_overload]
        IDisplayOutput InitializeOutput(Windows.Devices.Display.Core.DisplayTarget target);

        // InitializeOutput
        // ------------------------------------------------------------------------------------------------------------
        // Notes:
        //     Initializes the display engine for a particular target, using the StableMonitorId string to identify the
        //     display. This is expected to be sourced from a pre-generated config file.
        //
        IDisplayOutput InitializeOutput(String target);

        // SetConfigData
        // ----------------------------------------------------------------------------------------------------------------
        // Notes:
        //      Initialize tools with settings from a configuration file loaded by the framework
        //
        // Parameters:
        //      data
        //          The subsection of the json file for this toolbox
        //
        void SetConfigData(Windows.Data.Json.IJsonValue data);
    };

    //
    // The required initializer for IDisplayEngine implementations. This is how other components of this project will
    // instantiate IDisplayEngine implementations.
    //
    // This is to be implemented by capture card producer.
    //
    interface IDisplayEngineFactory
    {
        // Create
        // ----------------------------------------------------------------------------------------------------------------
        // Notes:
        //     Creates an IDisplayEngine implementation instance with a defined logger.
        //
        IDisplayEngine CreateDisplayEngine(MicrosoftDisplayCaptureTools.Framework.ILogger logger);
    };

}