import "DisplayManager.idl";
import "Framework.idl";

namespace MicrosoftDisplayCaptureTools.ConfigurationTools
{
    //
    // This enum defines what a particular tool is used for. The testing framework uses this information to determine in 
    // which order to run the tools.
    //
    // This list as currently stands is used for illustrative purposes, we anticipate adding several more categories
    //
    enum ConfigurationToolCategory
    {
        // This tool assists in device setup, and should be run first. Examples might include setting a custom display EDID
        DisplaySetup, 

        // This tool prepares the OS to draw pixels to the screen. Examples include creation of MPO planes or changing mode
        RenderSetup,

        // This tool actively modifies the output pixels directly. Examples drawing a specific pattern or 
        Render,
    };

    //
    // The requirements that the system under test and the capture card must meet for this tool to be valid. This is also
    // used to determine allowable tolerances on the output image.
    //
    interface IConfigurationToolRequirements
    {
        // The maximum capture tolerance that we expect this tool to contribute. If a capture card cannot support comparisons
        // with a tolerance, a non-zero value here will disallow the test run - this tool should not be used for that capture
        // card.
        Single ContributedComparisonTolerance;

        // The maximum capture tolerance that we can accept for this tool's operation. If the combined 
        // ContributedComparisonTolerance's of all tools selected for this run exeeds this amount, the run will be disallowed
        Single MaxComparisonTolerance;

        // This tool requires access to the raw pixel data when applying its changes to a reference image. A tool reporting
        // 'true' for this *must* use ITestOutput.GetFrameFromCPU instead of the GPU analogue when implementing the
        // ApplyToSoftwareReference function. This can allow more complicated changes, but will disable many performance 
        // optimizations and cause significantly slower performance.
        Boolean RequiresRawFrameAccess;
    };

    //
    // A ConfigurationTool represents a single operation that can be taken on a display according to the PICT parameters.
    // Tools are intended to be used together to define many different possible states for the entire display pipeline.
    // For example, a tool might modify the gamma lookup tables.
    //
    // ConfigurationTools must be able to apply whatever transform they are doing to a reference image as well, this 
    // reference image 
    //
    interface IConfigurationTool
    {
        // The name of the configuration tool, this should exactly match the PICT parameter name that this supports.
        String Name { get; };

        // The category for this configuration tool, this will determine when the framework interacts with this tool in 
        // relation to other tools in the test run.
        ConfigurationToolCategory Category{ get; };

        // The system and capture card requirements for this tool to be used.
        IConfigurationToolRequirements Requirements{ get; };

        // GetSupportedConfigurations
        // ----------------------------------------------------------------------------------------------------------------
        // Notes:
        //      This returns an array of strings which represent the supported PICT configurations for this tool.
        //
        String[] GetSupportedConfigurations();

        // GetDefaultConfiguration
        // ----------------------------------------------------------------------------------------------------------------
        // Notes:
        //      This returns a string representing the default configuration for this tool. The returned string must also
        //      be one of the options returned by GetSupportedConfigurations().
        //
        String GetDefaultConfiguration();

        // SetConfiguration
        // ----------------------------------------------------------------------------------------------------------------
        // Notes:
        //      This sets the PICT configuration to use for this tool. This value should be used for any subsequent calls 
        //      to apply this tool.
        //
        // Parameters:
        //      configuration
        //          This string specifies which PICT configuration for the Tool to use. This value must be in the list 
        //          returned by GetSupportedConfigurations and must exactly match the PICT parameter values.
        //
        void SetConfiguration(String configuration);

        // GetConfiguration
        // ----------------------------------------------------------------------------------------------------------------
        // Notes:
        //      This gets the PICT configuration set to use for this tool.
        //
        String GetConfiguration();

        // Apply
        // ----------------------------------------------------------------------------------------------------------------
        // Notes:
        //      This applies this tool's properties to the display engine's properties.
        //
        // Parameters:
        //      target
        //          This identifies the Windows display path for the target output.
        //
        void Apply(MicrosoftDisplayCaptureTools.Display.IDisplayEngine reference);
    }

    //
    // This object simply holds a slate of ConfigurationTools.
    //
    interface IConfigurationToolbox
    {
        // An identifier for this specific toolbox implementation. This is only intended to be used for logging.
        String Name{ get; };

        // GetSupportedTools
        // ----------------------------------------------------------------------------------------------------------------
        // Notes:
        //      Returns the full set of tools that are supported by this Toolbox
        //
        // Parameters:
        //      tools
        //          This output array contains the string identifier for every configuration tool that this toolbox can
        //          supply. These strings must match the 'name' field of the individual tools, as well as the identifiers
        //          specified in the PICT file.
        //
        String[] GetSupportedTools();

        // GetTool
        // ----------------------------------------------------------------------------------------------------------------
        // Notes:
        //      This constructs and returns a specific tool
        //
        // Parameters:
        //      toolName
        //          The identifier for the desired tool
        //
        IConfigurationTool GetTool(String toolName);

        // SetConfigData
        // ----------------------------------------------------------------------------------------------------------------
        // Notes:
        //      Initialize tools with settings from a configuration file loaded by the framework
        //
        // Parameters:
        //      data
        //          The subsection of the json file for this toolbox
        //
        void SetConfigData(Windows.Data.Json.IJsonValue data);
    }

    //
    // The required static initializer for IConfigurationToolbox implementations. This is how other components of this 
    // project will instantiate IController implementations.
    //
    // This is to be implemented by toolbox producer.
    //
    interface IConfigurationToolboxFactory
    {
        // Create
        // ----------------------------------------------------------------------------------------------------------------
        // Notes:
        //     Creates an IController implementation instance with a defined logger.
        //
        IConfigurationToolbox CreateConfigurationToolbox(MicrosoftDisplayCaptureTools.Framework.ILogger logger);
    };
}
