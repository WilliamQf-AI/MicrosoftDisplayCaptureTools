namespace HardwareCaptureTesting.Core
{
    [default_interface]
    runtimeclass Framework
    {
        // Framework
        // ----------------------------------------------------------------------
        // Initializes the framework
        // ----------------------------------------------------------------------
        // Parameters:
        //   pluginPath - Specifies the path to the dll from which to load the capture
        //                device plugin.
        Framework(String pluginPath);

        // Framework
        // ----------------------------------------------------------------------
        // Initializes the framework with toolbox
        // ----------------------------------------------------------------------
        // Parameters:
        //   pluginPath  - Specifies the path to the dll from which to load the capture
        //                 device plugin.
        //   toolboxPath - Specifies the path to the dll from which to load a toolbox
        Framework(String pluginPath, String toolboxPath);

        // AddToolbox
        // ----------------------------------------------------------------------
        // Registers an override 'toolbox'. This is intended to allow support for 
        // in-development and custom tool implementations.
        // ----------------------------------------------------------------------
        // Parameters:
        //   toolboxPath - Specifies the path to the dll from which to load an additional
        //                 'override' toolbox.
        void AddToolbox(String toolboxPath);

        // Get or set the path used for newly generated test results
        String OutputDirectoryPath{ get; set; };

        // Get or set the path containing reference data
        String ComparisonDirectoryPath{ get; set; };

        // ----------------------------------------
        // Functions for use in manual tests
        // ----------------------------------------

        // GetPlugin
        // ----------------------------------------------------------------------
        // Retrieve the plugin directly. If you want to build a manual test, you'll
        // need this to fetch the capture card's captured display state.
        // ----------------------------------------------------------------------
        // Return:
        //   The plugin object which handles interfacing with the capture card. This will
        //   be the same plugin exported by the dll provided as pluginPath to the 
        //   constructor
        HardwareCaptureTesting.CaptureCard.Plugin GetPlugin();


        // GetDisplaysUnderTest
        // ----------------------------------------------------------------------
        // Retrieves a map of the OS-tracked display targets to the plugin inputs.
        // ----------------------------------------------------------------------
        // Return:
        //   An immutable map which shows which adapters/targets map to the capture
        //   card's inputs.
        IMapView<Windows.Devices.Display.Core.DisplayTarget, UInt32> GetDisplaysUnderTest();

        // StartManualTest
        // ----------------------------------------------------------------------
        // Starts a manual test
        // ----------------------------------------------------------------------
        // Parameters:
        //   testName - Specifies a name to be used in logging this test.
        // 
        // Notes:
        //   This is only for the purpose of logging, it does not start running
        //   any test-specific code.
        void StartManualTest(String testName);

        // UseTool
        // ----------------------------------------------------------------------
        // Modify the state of a supported 'tool' - these should match the
        // supplied PICT parameters.
        // ----------------------------------------------------------------------
        // Parameters:
        //   toolName   - The tool name to manipulate (matches the PICT name)
        //   toolParams - The arguments to provide to the named tool (matches the
        //                PICT cases).
        void UseTool(String toolName, String toolParams);

        // ----------------------------------------
        // Functions for use in combinatorial tests
        // ----------------------------------------

        // StartCombinatorialTest
        // ----------------------------------------------------------------------
        // Starts a combinatorial test
        // ----------------------------------------------------------------------
        // Notes:
        //   This performs the following actions:
        //      1. Checks registered toolboxes' supported tools against TAEF and
        //         PICT parameters to determine the current test scenario.
        //      2. Generates a repeatable test name for logging based on the 
        //         current scenario.
        //      3. Runs the test scenario
        //      4. Retrieves the capture card's state
        //      5. (If applicable) compares captured state against reference.
        //
        //   These tests are logged with a generated name identifying the current
        //   parameters.
        void RunCombinatorialTest();
    }
}