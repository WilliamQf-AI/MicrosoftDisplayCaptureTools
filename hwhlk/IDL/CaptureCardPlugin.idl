import "ConfigurationTools.idl";

namespace CaptureCard
{
    //
    // CaptureCapabilities represents the capabilities of the frame capture device and plugin. This is used to 
    // determine if test cases are applicable and how the framework should proceed.
    //
    // Other capabilities of the capture card are exposed by simply exposing various configuration tools, see
    // ConfigurationTools.idl for more information.
    //
    struct CaptureCapabilities
    {
        // Can the capture card return captured frames to the host _without_ any compression or artifacts
        Boolean returnRawFramesToHost;
        
        // Can the capture card return captured frames to the host - to be used for diagnostics/debugging
        Boolean returnFramesToHost;

        // Can the capture card capture multiple subsequent frames
        Boolean captureFrameSeries;

        // Note: While there are only a few of these types defined now, we anticipate this list to grow as we 
        // define more test scenarios.
    };

    //
    // CaptureTriggerType defines the different types of capture triggers
    //
    enum CaptureTriggerType
    {
        // Immediately capture the next available frame
        Immediate,

        // Capture the next available frame after some time period
        Timer, 

        // Capture first frame that is not completely black
        FirstNonEmpty, 

        // Note: While there are only a few of these types defined now, we anticipate this list to grow as we 
        // define more test scenarios.
    };

    //
    // A CaptureTrigger represents settings for what should 'trigger' the capture device to single out a frame.
    //
    struct CaptureTrigger
    {
        // Define the type of this trigger
        CaptureTriggerType type;

        // For CaptureTriggerType::Timer, this specifies the amount of time (in ms) to wait before capturing.
        UInt32 timeToCapture;

        // Note: As with CaptureTriggerType, we expect this struct to grow as we define more test scenarios and any
        // trigger types that they may necessitate.
    };

    //
    // Represents a captured frame. The actual data for the captured frame can be either on PC or on the capture card
    // itself, this object mearly controls 
    //
    interface IDisplayCapture
    {
        // CompareCaptureToReference
        // ----------------------------------------------------------------------------------------------------------------
        // Notes:
        //      Compares the captured image against a software-generated reference image.
        //
        //      Microsoft will be providing a lib that does this image comparison on the host computer and will log various
        //      statistics and data about the comparison. Others are welcome to consume or modify this for their own 
        //      capture card plugins if applicable.
        //
        // Parameters:
        //      name
        //          A string name uniquely identifying the set of parameters specifying this particular test run.
        //      referenceImage
        //          The reference data generated by the various configuration tools. This object includes any calculated
        //          tolerances alongside the actual comparison data.
        //
        void CompareCaptureToReference(String name, DisplayStateReference.IStaticReference reference);

        // SaveCaptureToDisk
        // ----------------------------------------------------------------------------------------------------------------
        // Notes:
        //      This method requests that the captured frame be saved to disk at the provided location. This is an optional
        //      API, and is only used for debugging purposes in the event that a test fails. Official HLK runs will include
        //      this, but it is perfectly valid to just return from this function without doing anything, or logging some
        //      other debug information.
        //
        // Parameters:
        //      path
        //          The location to save the captured data. The framework will organize a folder structure for easily
        //          referring to particular tests.
        //
        void SaveCaptureToDisk(String path);
    }

    interface IDisplayInput
    {
        // A string identifier for this particular captured display, to be used for logging.
        String Name { get; };

        // MapCaptureInputToDisplayPath
        // ----------------------------------------------------------------------------------------------------------------
        // Notes:
        //      Return the Windows display path for this captured display. This is how the testing framework knows which 
        //      display to use as an output. We don't specify how a capture card is meant to do this. However, we will 
        //      provide an optional lib does this mapping via programmable EDIDs - if the capture card is capable of 
        //      HPD'ing with specific EDIDs.
        //
        Windows.Devices.Display.Core.DisplayTarget MapCaptureInputToDisplayPath();

        // GetCapabilities
        // ----------------------------------------------------------------------------------------------------------------
        // Notes:
        //      Returns the capabilities of the capture card for this display. These will be used to determine which tools
        //      are applicable and which are not.
        //
        CaptureCapabilities GetCapabilities();

        // CaptureFrame
        // ----------------------------------------------------------------------------------------------------------------
        // Notes:
        //      Captures a display frame on the device when certain conditions are met. We expressly do not specify that 
        //      the captured pixels must be brought back to the host computer - it is valid to keep a representation of the 
        //      frame only on the capture device, although this inherently limits debuggability.
        //
        // Parameters:
        //      trigger
        //          This indicates the conditions on which the frame should be captured. These conditions can range from 
        //          'capture the next frame' to 'capture the next non-empty frame' to 'capture the next frame matching a
        //          specific pattern'. Supported triggers should be reported in this object's GetCapabilities method, and
        //          this method should fail if an unsupported trigger is supplied.
        //
        IDisplayCapture CaptureFrame(CaptureTrigger trigger);

        // FinalizeDisplayState
        // ----------------------------------------------------------------------------------------------------------------
        // Notes:
        //      This is called by the framework upon iterating through every "DisplaySetup" configuration tool. If this
        //      plugin has tools that require some device reset or some time consuming operation (for example, HPD'ing with
        //      a specific EDID), that operation should be performed when this function is called.
        //
        void FinalizeDisplayState();
    }

    //
    // The entry-point object for a capture card plugin, this object is instantiated by the framework and is used to 
    // access the functionalities of the hardware.
    //
    runtimeclass Controller
    {
        // Controller
        // ----------------------------------------------------------------------------------------------------------------
        // Notes:
        //      Constructs a CaptureCardPlugin object which will handle interfacing with a physical display capture card.
        //
        Controller();

        // A string identifier for this particular implementation of the framework, this is only to be used for logging.
        String Name{ get; };


        // EnumerateDisplayInputs
        // ----------------------------------------------------------------------------------------------------------------
        // Notes:
        //      Enumerates 
        //
        // Parameters:
        //      pluginPath
        //          This string represents a filepath from which a conformant capture card plugin implementation is exposed.
        //
        IDisplayInput[] EnumerateDisplayInputs();

        // GetToolbox
        // ----------------------------------------------------------------------------------------------------------------
        // Notes:
        //      Returns a ConfigurationToolbox object that contains the set of operations exposed to the framework via this
        //      capture card. For example, a tool exposed through this toolbox might allow triggering the framework to 
        //      hotplug with a specific EDID.
        //
        //      
        //
        ConfigurationTools.ConfigurationToolbox GetToolbox();
    }
}
